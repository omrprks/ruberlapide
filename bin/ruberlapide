#!/usr/bin/env ruby

# TODO:
	# Insert random commas in sentences.
	# If number of words not specified, use length of dictionary.
	# Breakpoints for sentences and passages.
	# If number of sentences/passages not specified, randomize.

Dir["#{File.dirname(__FILE__)}/../lib/*.rb"].each do |_|
	require "#{File.dirname(_)}/#{File.basename(_, File.extname(_))}"
end

require 'getoptlong'

$out = "ruberlapide.out"
$verbose = false

$usage =
"Usage: ruberlapide [OPTION] args
options:
	-o, --out	output file name (default: \"ruberlapide.out\")
	-w, --words	specifies the number of words to be generated
	-l, --lines	specifies the number of lines to be generated
	-p, --passage	specifies the number of passages to be generated
	-v, --verbose	prints output to console
	-V, --version	prints version information
	    --help	prints this message (\'-h\' for short message)

	example:
		$ ruberlapide -o \"RuberLapide.txt\" -w 42"

$opts = GetoptLong.new(
	["--help", GetoptLong::NO_ARGUMENT],
	["--version", "-V", GetoptLong::NO_ARGUMENT],
	["--verbose", "-v", GetoptLong::NO_ARGUMENT],
	["--out", "-o", GetoptLong::REQUIRED_ARGUMENT],
	["--words", "-w", GetoptLong::REQUIRED_ARGUMENT],
	["--lines", "-l", GetoptLong::REQUIRED_ARGUMENT],
	["--passages", "-p", GetoptLong::REQUIRED_ARGUMENT],
)

$words, $lines, $passages = 0, 0, 0;

$opts.each do |opt, arg|
	case opt
		when "--help"
			puts "#{$usage}"
			exit 1
		when "--version"
			puts "ruberlapide"
			exit 1
		when "--verbose"; $verbose = true
		when "--out"; $out = arg.chomp.to_s
		when "--words"; $words = arg.chomp.to_i
		when "--lines"; $lines = arg.chomp.to_i
		when "--passages"; $passages = arg.chomp.to_i
	end
end

# out = []
$verba = []

# $generator = Random.new

# $WORDS_PER_SENTENCE_AVG = rand(0.0..10.0);
# $WORDS_PER_SENTENCE_STD = rand(10.0..30.0);

if $words <= 0 && $lines <= 0 && $passages <= 0 then
	puts "Please specify number of words, lines, or passages to be generated.".red, $usage
	exit 1
else
	$words = RuberLapide::verba.length if $words <= 0
	$words.times do |_|
		$verba = RuberLapide::verba.dup if $verba.empty?

		print(
			(_ >= 0 && _ <= 4 ? $verba[_] : $verba.shuffle!.pop).capitalize,
			(_ != ($words - 1) ? ' ' : ".\n")
		) if $verbose

		# && _ % $WORDS_PER_SENTENCE_STD != 0 || _ == 0

		# $out << (_ >= 0 && _ <= 4 ? $verba[_] : $verba.shuffle!.pop).capitalize
		# $out << ".\n" if _ == ($n - 1)
	end

	# File.open(filename, "wb").write($out.join(" "))
	puts "Done: #{$out}".green unless $verbose
end